---
import { Image } from "astro:assets";
import { getCollection } from "astro:content";

import Layout from "../../layouts/Layout.astro";
import PlatformActions from "../../components/PlatformActions.astro";
import Footer from "../../components/Footer.astro";

import logo from "../../assets/images/logo-horizontal.svg";
import emailIcon from "../../assets/images/email-icon.svg";
import facebookIcon from "../../assets/images/facebook-icon.svg";
import twitterIcon from "../../assets/images/twitter-icon.svg";
import linkIcon from "../../assets/images/link-icon.svg";
import { getEntries } from "astro:content";

export async function getStaticPaths() {
  const entries = await getCollection("episodes");
  entries.sort((a, b) => a.data.number - b.data.number);

  return entries.map((episode, index, arr) => ({
    params: { slug: episode.data.number },
    props: { episode, previous: arr[index - 1], next: arr[index + 1] }
  }));
}

const { episode, previous, next } = Astro.props;
const title = `${episode.data.number}: ${episode.data.title} | Front-End Fire`;
const description = episode.data.teaser || episode.data.description.substring(0, 200) + "...";
const hosts = await getEntries(episode.data.hosts);
---

<Layout title={title} description={description}>
  <header class="episode-header">
    <div class="episode-header-content">

      <div class="episode-title-section">
        <div class="episode-info">
          <span class="tag">{episode.data.type}</span>
          <div class="episode-number-badge">
            <span class="episode-number-text">EPISODE</span>
            <span class="episode-number-value">{episode.data.number}</span>
          </div>
        </div>
        <h1 class="episode-title">{episode.data.title}</h1>
        <div class="header-accent"></div>
      </div>
    </div>
  </header>

  <main>
    <div class="episode-content">
      {
        episode.data.teaser && (
          <p class="episode-teaser">{episode.data.teaser}</p>
        )
      }

      {episode.data.audio && <audio controls src={episode.data.audio} />}
    </div>

    <div class="episode-details">
      <!-- <h2 class="section-heading">Details</h2> -->
      <time datetime={episode.data.date.toISOString()} class="episode-date">
        {
          episode.data.date.toLocaleDateString("en-US", {
            year: "numeric",
            month: "long",
            day: "numeric"
          })
        }
      </time>

      <ul>
      {
        episode.data.clip && (
          <li>
            <a href={episode.data.clip} target="_blank">
              View Clip
            </a>
          </li>
        )
      }
      {
        episode.data.youtube && (
          <li>
            <a href={episode.data.youtube} target="_blank">
              View on YouTube
            </a>
          </li>
        )
      }
    </ul>

      <p><strong class="hosted-by">Hosted by</strong></p>
      <ul>
        {
          hosts.map((host) => (
            <li>
              <a href={host.data.website} target="_blank">
                {host.data.name}
              </a>
            </li>
          ))
        }
      </ul>

      {
        episode.data.guests && (
          <>
            <h2 class="section-heading">Guests</h2>
            <ul>
              {episode.data.guests.map((guest) => (
                <li>
                  <a href={guest.url} target="_blank">
                    {guest.name}
                  </a>
                </li>
              ))}
            </ul>
          </>
        )
      }

      <p>
        <strong>Share this episode</strong>
        <a
          title="Share via email"
          href={`mailto:?subject=${encodeURIComponent(episode.data.title)}&body=Check out this episode from the Front-End Fire podcast%0D%0A%0D%0AApple Podcasts:%0D%0A${encodeURIComponent(episode.data.apple)}%0D%0A%0D%0ASpotify:%0D%0A${encodeURIComponent(episode.data.spotify)}`}
          class="share-action"
        >
          <Image src={emailIcon} alt="Share via email" />
        </a>
        &nbsp;
        <a
          title="Share on Facebook"
          target="_blank"
          href={`https://www.facebook.com/sharer/sharer.php?u=${episode.data.spotify}`}
          class="share-action"
        >
          <Image src={facebookIcon} alt="Share on Facebook" />
        </a>
        &nbsp;
        <a
          title="Tweet this episode"
          target="_blank"
          href={`https://twitter.com/intent/tweet?text=${encodeURIComponent(episode.data.title)}%0D%0A${encodeURIComponent(episode.data.spotify)}`}
          class="share-action"
        >
          <Image src={twitterIcon} alt="Tweet this episode" />
        </a>
        &nbsp;
        <button
          title="Copy Episode Link"
          popovertarget="copied-popover"
          class="share-action copy-episode-link-action"
        >
          <Image src={linkIcon} alt="Copy Episode Link" />
        </button>
        <div popover id="copied-popover">Copied!</div>
      </p>
    </div>

    <div class="episode-extras">
      <h2 class="section-heading">Full Description</h2>
      <p class="episode-description">
        {episode.data.description}
      </p>

      <h2 class="section-heading">Links</h2>
      <ul class="episode-links">
        {
          episode.data.links.map((link) => (
            <li>
              <a href={link.url} target="_blank">
                {link.text}
              </a>
            </li>
          ))
        }
      </ul>
    </div>

    <nav class="episode-nav">
      {
        previous && (
          <a
            href={"/episodes/" + previous.data.number}
            class="previous-episode-nav-link"
          >
            <span>
              ep. {previous.data.number}: {previous.data.title}
            </span>
          </a>
        )
      }
      {
        next && (
          <a
            href={"/episodes/" + next.data.number}
            class="next-episode-nav-link"
          >
            <span>
              ep. {next.data.number}: {next.data.title}
            </span>
          </a>
        )
      }
    </nav>
  </main>

  <Footer />
</Layout>

<script>
  document
    .querySelector(".copy-episode-link-action")
    ?.addEventListener("click", () => {
      navigator.clipboard.writeText(location.href);
      window.setTimeout(
        () => document.getElementById("copied-popover")?.hidePopover(),
        5000
      );
    });
</script>

<style>
  .episode-header {
    padding: 4rem 0 3rem;
    background: #3d3c40 linear-gradient(#161619, #3d3c40);
    color: var(--off-white);
    margin-bottom: 2rem;
  }

  .episode-header-content {
    width: var(--content-width);
    max-width: 80rem;
    margin: 0 auto;
    padding: 0 1rem;
  }

  .header-top {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
  }

  .episode-title-section {
    margin-top: 1rem;
  }

  .episode-title {
    font-size: 3.5rem;
    font-weight: 200;
    margin: 0.5rem 0 0 0;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    letter-spacing: -0.02em;
    line-height: 1.2;
  }

  .header-accent {
    width: 60px;
    height: 4px;
    background: var(--primary-color);
    border-radius: 2px;
    margin-top: 1rem;
  }

  main,
  nav,
  footer {
    width: var(--content-width);
    max-width: 80rem;
    margin: auto;
  }

  main {
    display: flex;
    flex-wrap: wrap;
  }

  nav {
    margin-top: 3em;
  }

  audio {
    display: block;
    width: 100%;
    margin: 1em 0;
  }

  audio::-webkit-media-controls-enclosure {
    background: var(--primary-color);
    border-radius: 4px;
  }

  ul {
    list-style: none;
    margin: 0;
    padding: 0;
  }

  strong {
    display: block;
  }

  [popover] {
    border: 1px solid var(--primary-color-dark);
    border-radius: 4px;
    box-shadow: 0 0 3px var(--primary-color-dark);

    &:popover-open {
      position: absolute;
      inset: unset;
      right: 1em;
      bottom: 1em;
    }
  }

  .header-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .logo {
    width: 9em;
    height: auto;
    vertical-align: middle;
    margin-right: auto;
  }

  .episode-content {
    max-width: 40em;
    margin-right: 5%;
  }

  .episode-details {
    margin-top: 2em;
  }

  .episode-extras {
    width: 100%;
    margin-top: 3rem;
  }

  .episode-extras h2 {
    margin-top: 2rem;
  }

  .episode-info {
    display: flex;
    align-items: center;
    gap: 1.5em;
    text-transform: uppercase;
    font-weight: 400;
    font-size: 0.875rem;
    color: var(--off-white);
    opacity: 0.9;
  }

  .episode-number-badge {
    display: flex;
    flex-direction: column;
    align-items: center;
    background: rgba(255, 255, 255, 0.1);
    border: 2px solid var(--primary-color);
    border-radius: 12px;
    padding: 0.75rem 1.25rem;
    backdrop-filter: blur(10px);
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .episode-number-badge::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, rgba(255, 255, 255, 0.05) 100%);
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .episode-number-badge:hover::before {
    opacity: 1;
  }

  .episode-number-badge:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.3);
    border-color: var(--primary-color);
  }

  .episode-number-text {
    font-size: 0.7rem;
    font-weight: 600;
    letter-spacing: 0.1em;
    color: var(--primary-color);
    margin-bottom: 0.25rem;
    opacity: 0.9;
  }

  .episode-number-value {
    font-size: 2rem;
    font-weight: 700;
    color: var(--off-white);
    line-height: 1;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
  }

  .episode-teaser {
    font-size: 1.2rem;
    line-height: 1.6;
    margin: 1rem 0 2rem 0;
    color: var(--base-color-dark);
  }

  .episode-date {
    display: inline-block;
    font-weight: 400;
    color: var(--base-color-dark);
    margin-bottom: 0.5rem;
  }

  .episode-details p {
    margin-top: 0.5rem;
    margin-bottom: 0.5rem;
  }

  .hosted-by {
    margin: 0.5rem 0;
  }

  .share-action {
    text-decoration: none;

    & img {
      height: 1.25em;
      width: 1.25em;
    }
  }

  button.share-action {
    height: 1.25em;
    width: 1.25em;
    background: none;
    border: none;
    padding: 0;
    cursor: pointer;
    font-size: inherit;
  }

  .episode-description,
  .episode-links {
    max-width: 40em;
    margin-bottom: 0;
  }

  .episode-description {
    white-space: pre-line;
  }

  .episode-nav {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  [class$="episode-nav-link"] {
    display: inline-flex;
    align-items: center;
    gap: 0.35em;
    width: 33%;
    font-weight: 400;
    text-decoration: none;

    &::before,
    &::after {
      display: inline-block;
      vertical-align: 0.1em;
      font-weight: 500;
      font-size: 1.5em;
      font-family: monospace;
    }

    & span {
      display: -webkit-box;
      -webkit-box-orient: vertical;
      -webkit-line-clamp: 3;
      overflow: hidden;
    }
  }

  .previous-episode-nav-link::before {
    content: "\2190";
    margin-left: -0.85em;
  }

  .next-episode-nav-link {
    margin-left: auto;

    &::after {
      content: "\2192";
      margin-right: -0.85em;
    }
  }

  @media (max-width: 768px) {
    .episode-title {
      font-size: 2rem;
    }

    .episode-header-content {
      padding: 0 1rem;
    }

    .episode-header {
      padding: 2rem 0 1.5rem;
    }

    .episode-info {
      flex-direction: column;
      gap: 1rem;
      align-items: flex-start;
    }

    .episode-number-badge {
      padding: 0.5rem 1rem;
    }

    .episode-number-value {
      font-size: 1.5rem;
    }

    .episode-number-text {
      font-size: 0.6rem;
    }
  }
</style>
